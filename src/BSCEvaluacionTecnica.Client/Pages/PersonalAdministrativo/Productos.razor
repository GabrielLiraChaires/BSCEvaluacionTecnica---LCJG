@page "/AdministrarProductosPersonalAdministrativo"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using CurrieTechnologies.Razor.SweetAlert2
@using BSCEvaluacionTecnica.Shared.Extensions;
@using BSCEvaluacionTecnica.Business.Interfaces;
@using System.Security.Claims
@using BSCEvaluacionTecnica.Shared.DTOs;
@using System.Text
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navegacion
@inject IAccesoService accesoService
@inject IPermisoModulosService permisoModulosService
@inject IProductoService productoService
@inject IPDFService _pdfService
@inject IJSRuntime _js
@inject SweetAlertService swal

@attribute [Authorize(Roles = "Personal Administrativo")]

<PageTitle>Productos - Personal Administrativo</PageTitle>

<style>
    option {
        color: white;
        background-color: #2c2f4a;
    }

    .busqueda, .busqueda::placeholder {
        background-color: #9FA5C9;
        color: white;
        border: none;
        border-radius: 5px;
    }

        .busqueda:focus {
            outline: none; /* Evita el sombreado azul o resaltado */
            box-shadow: none; /* Evita el borde adicional */
            border: none; /* Asegura que no aparezca un borde */
        }
</style>

<AuthorizeView>
    <Authorized>

        @if (context.User.FindFirst("Acceso")!.Value.ToString().Equals("Permitido")) // Validar que el usuario tenga acceso al sistema.
        {
            if (accesoModulo == 1)
            {
                <div class="container-fluid px-0 p-2" style="min-height: 100vh; display: flex; flex-direction: column;">
                    <!-- Tabla de Productos -->
                    <div class="row w-100 mx-0 mb-3">
                        <div class="col-12 col-lg-9 mb-3 mb-lg-0">
                            <div class="d-flex align-items-center">
                                <div class="input-group w-100">
                                    <InputText class="busqueda form-control" style="background-color: #9FA5C9; color:white;" placeholder="Buscar por Clave o Nombre" @bind-Value="textoBusqueda" @oninput="Filtrar" />
                                    <button class="busqueda btn btn-outline-secondary ml-2" type="button" @onclick="LimpiarFiltro"><i class="bi bi-pencil"></i> Limpiar</button>
                                </div>
                            </div>
                        </div>
                        <!-- Botones NUEVO y CONSULTAR EXISTENCIAS -->
                        <div class="col-12 col-lg-3 d-flex justify-content-end align-items-center">
                            <button type="button" class="btn btn-primary btn-sm me-2" style="padding:0.375rem 0.75rem;background-color:#424769;color:white;border:none;white-space:nowrap;" @onclick="NuevoProducto"><i class="bi bi-plus-circle"></i> Nuevo</button>
                            <button type="button" class="btn btn-secondary btn-sm" style="padding:0.375rem 0.75rem;background-color:#6c757d;color:white;border:none;white-space:nowrap;" @onclick="GenerarPdf"><i class="bi bi-box-seam"></i> Reporte de Productos</button>
                        </div>
                    </div>
                    <div class="row w-100">
                        @if (productos?.Count() == 0 || productos == null)
                        {
                            <div class="alert alert-primary d-flex align-items-center justify-content-center" role="alert">
                                <div>
                                    <i class="bi bi-database-fill-x me-2"></i>
                                    No se cuenta con productos registrados.
                                </div>
                            </div>
                        }
                        else if (productosFiltrados?.Count() == 0 || productosFiltrados == null)
                        {
                            <div class="alert alert-info d-flex align-items-center justify-content-center" role="alert">
                                <div>
                                    <i class="bi bi-database-fill-x me-2"></i>
                                    No se encontraron coincidencias.
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row mx-0">
                                <div class="table-responsive rounded-3 shadow" style="max-height: 800px;">
                                    <table class="table table-hover mb-0">
                                        <thead class="sticky-top" style="background: linear-gradient(135deg, #2D3250 0%, #424769 100%)">
                                            <tr class="text-center">
                                                <th class="align-middle py-3 text-black fw-semibold ps-4">Clave de Producto</th>
                                                <th class="align-middle py-3 text-black fw-semibold">Nombre</th>
                                                <th class="align-middle py-3 text-black fw-semibold">Número de Existencias</th>
                                                <th class="align-middle py-3 text-black fw-semibold">Costo por Unidad</th>
                                                <th class="align-middle py-3 text-black fw-semibold pe-4">Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                int rowIndex = 0;
                                                foreach (var item in productosFiltrados!)
                                                {
                                                    string rowClass = rowIndex % 2 == 0 ? "bg-light" : "bg-white";
                                                    <tr class="text-center @rowClass border-bottom border-secondary">
                                                        <td class="align-middle">@item.Clave</td>
                                                        <td class="text-start align-middle ps-4">@item.Nombre</td>
                                                        <td class="align-middle">@item.Existencias</td>
                                                        <td class="align-middle">@(item.CostoUnidad.ToString().Replace(",","."))</td>
                                                        <td class="align-middle pe-4">
                                                            <div class="d-flex justify-content-center gap-2">
                                                                <button class="btn btn-warning btn-sm d-flex align-items-center text-white px-3" @onclick="(() => SeleccionarProducto(item,1))">
                                                                    <i class="bi bi-pencil me-2"></i>
                                                                    <span>Editar</span>
                                                                </button>
                                                                <button class="btn btn-info btn-sm d-flex align-items-center text-white px-3" @onclick="(() => SeleccionarProducto(item,2))">
                                                                    <i class="bi bi-box-arrow-in-right me-2"></i>
                                                                    <span>Entrada de Almacen</span>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    rowIndex++;
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                    <!-- Modal de edición -->
                    <div class="modal fade" id="modalEdicion" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalDocumento" aria-hidden="true">
                        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable 0">
                            <div class="modal-content">
                                <div class="modal-header text-white" style="background-color:#2D3250;">
                                    <p class="modal-title">
                                        <strong>@(edicion ? $"Edición del producto {producto.Nombre}" : "Nuevo Producto")</strong>
                                    </p>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <EditForm Model="producto" OnValidSubmit="GuardarActualizarProducto" Context="Formulario">
                                        <DataAnnotationsValidator />
                                        <div class="modal-body">
                                            <div class="row mb-2">
                                                <div class="col-12">
                                                    <label for="inputText" class="form-label"><strong>Clave del Producto</strong></label>
                                                    <InputText class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="producto.Clave" />
                                                    <ValidationMessage For="@(() => producto.Clave)" />
                                                </div>
                                            </div>
                                            <div class="row mb-2">
                                                <div class="col-6">
                                                    <label for="inputText" class="form-label"><strong>Nombre</strong></label>
                                                    <InputText class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="producto.Nombre" />
                                                    <ValidationMessage For="@(() => producto.Nombre)" />
                                                </div>
                                            </div>
                                            <div class="row mb-2">
                                                <div class="col-6">
                                                    <label for="inputText" class="form-label"><strong>Número de Existencias</strong></label>
                                                    <InputNumber class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="producto.Existencias" />
                                                    <ValidationMessage For="@(() => producto.Existencias)" />
                                                </div>
                                                <div class="col-6">
                                                    <label for="inputText" class="form-label"><strong>Costo por Unidad</strong></label>
                                                    <InputNumber class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="producto.CostoUnidad" />
                                                    <ValidationMessage For="@(() => producto.CostoUnidad)" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="submit" class="btn btn-dark fs-5" style="border-radius: 20px;">
                                                <i class="bi bi-check2-circle"></i> Aceptar
                                            </button>
                                            <button type="button" class="btn btn-light fs-5" style="border-radius: 20px;" data-bs-dismiss="modal">
                                                <i class="bi bi-arrow-left-square"></i> Cancelar
                                            </button>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Modal de entrada de almacén -->
                    <div class="modal fade" id="modalEntrada" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalDocumento" aria-hidden="true">
                        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable 0">
                            <div class="modal-content">
                                <div class="modal-header text-white" style="background-color:#2D3250;">
                                    <p class="modal-title">
                                        <strong>@($"Entrada de {producto.Nombre}")</strong>
                                    </p>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <EditForm Model="entradaProducto" OnValidSubmit="EntradaProducto" Context="FormularioEntrada">
                                        <DataAnnotationsValidator />
                                        <div class="modal-body">
                                            <div class="row mb-2">
                                                <div class="col-12">
                                                    <p><strong>Registro de entrada de producto a almacén</strong></p>
                                                    <p>Producto: @($"{producto.Nombre}")</p>
                                                    <p>Existencias Actuales: @($"{producto.Existencias}")</p>
                                                </div>
                                            </div>
                                            <div class="row mb-2">
                                                <div class="col-6">
                                                    <label for="inputText" class="form-label"><strong>Número de Existencias</strong></label>
                                                    <InputNumber class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="entradaProducto" />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="submit" class="btn btn-dark fs-5" style="border-radius: 20px;">
                                                <i class="bi bi-check2-circle"></i> Aceptar
                                            </button>
                                            <button type="button" class="btn btn-light fs-5" style="border-radius: 20px;" data-bs-dismiss="modal">
                                                <i class="bi bi-arrow-left-square"></i> Cancelar
                                            </button>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            }
            else if (accesoModulo == 2)
            {
                <p class="alert alert-danger">
                    Actualmente este módulo se encuentra deshabilitado o su rol de usuario no tiene el acceso necesario.
                </p>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    //Funciones JS.
    [Inject] IJSRuntime JS { get; set; }
    //Acceso a el módulo.
    int accesoModulo = 0;
    List<ProductoDTO>? productos = new List<ProductoDTO>();
    List<ProductoDTO>? productosFiltrados = new List<ProductoDTO>();
    ProductoDTO? producto = new ProductoDTO();
    //Barra de busqueda
    string textoBusqueda = string.Empty;
    bool edicion = false;
    int entradaProducto = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider; //Crear variable para autenticación.
            var sesion = await autenticacionExt.GetAuthenticationStateAsync(); //Obtener el estado de la autenticación actual.

            if (sesion.User.Identity!.IsAuthenticated) //Si el usuario está autenticado.
            {
                var tokenValido = await accesoService.ValidarToken(sesion.User.FindFirst("Token")!.Value.ToString()); // Revisar si el token es válido.

                if (tokenValido != null && tokenValido.Equals("Token válido")) //Si el token es válido.
                {
                    var acceso = await permisoModulosService.ConsultarModulosUsuario(Convert.ToInt32(sesion.User.FindFirst(ClaimTypes.NameIdentifier)?.Value)); //Consulta de módulos.
                    if (acceso.Find(x => x.ModuloSistema!.Equals("AdministrarProductos-PersonalAdministrativos"))!.Acceso!.Equals("Permitido")) //Si el usuario tiene acceso al módulo.
                    {
                        accesoModulo = 1;

                        //Extraer a los productos.
                        productos = await productoService.Consultar();
                        productosFiltrados = productos;
                    }
                    else
                    {
                        accesoModulo = 2;
                    }
                }
                else //Si no es válido mostrar mensaje de error.
                {
                    await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = tokenValido,
                        Icon = SweetAlertIcon.Error
                    });
                    //Cerrar sesión y redirigir a logín.
                    await autenticacionExt.ActualizarEstadoAutenticacion(null);
                    navegacion.NavigateTo("/");
                }
            }
            else
            {
                accesoModulo = 2;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar la página, detalles: " + ex);
            //Cerrar sesión y redirigir a login
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
            navegacion.NavigateTo("/", true);
        }
    }

    #region "Seleccionar y administrar productos"
    private async void SeleccionarProducto(ProductoDTO productoSeleccionado, int caso)
    {
        if (caso==1)
        {
            //Validar cuando el usuario seleccione editar al usuario.
            edicion = true;
            producto = new ProductoDTO
            {
                Clave = productoSeleccionado.Clave,
                Nombre = productoSeleccionado.Nombre,
                Existencias = productoSeleccionado.Existencias,
                CostoUnidad = productoSeleccionado.CostoUnidad
            };
            StateHasChanged();
            await JS.InvokeVoidAsync("abrirModal", "modalEdicion");
        }
        else if(caso==2)
        {
            producto = new ProductoDTO
            {
                Clave = productoSeleccionado.Clave,
                Nombre = productoSeleccionado.Nombre,
                Existencias = productoSeleccionado.Existencias,
                CostoUnidad = productoSeleccionado.CostoUnidad
            };
            StateHasChanged();
            await JS.InvokeVoidAsync("abrirModal", "modalEntrada");
        }
    }
    private async void NuevoProducto()
    {
        edicion = false;
        StateHasChanged();
        await JS.InvokeVoidAsync("abrirModal", "modalEdicion");
    }
    private void Filtrar(ChangeEventArgs e)
    {
        textoBusqueda = e.Value?.ToString() ?? "";
        if (string.IsNullOrWhiteSpace(textoBusqueda))
        {
            productosFiltrados = productos;
        }
        else
        {
            productosFiltrados = productos?.Where(v =>
                v.Nombre.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                v.Clave.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) 
            ).ToList();
        }
    }
    private void LimpiarFiltro()
    {
        textoBusqueda = string.Empty;
        productosFiltrados = productos;
    }
    private async Task EntradaProducto()
    {
        var autenticacionExt = (AutenticacionExtension)autenticacionProvider; //Crear variable para la autentificación.
        var sesion = await autenticacionExt.GetAuthenticationStateAsync();
        var tokenValido = await accesoService.ValidarToken(sesion.User.FindFirst("Token")!.Value.ToString()); //Revisar si el token es valido.

        if (tokenValido != null && tokenValido.Equals("Token válido"))
        {
            try
            {
                var resultado = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmación",
                    Text = $"¿Estás seguro de que deseas agregar {entradaProducto} unidades de {producto.Nombre} a el almacén?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí",
                    CancelButtonText = "No"
                });
                if (resultado.IsConfirmed)
                {
                    producto.Existencias = producto.Existencias + entradaProducto;
                    var respuesta = await productoService.Actualizar(producto);
                    if (respuesta.EsCorrecto)
                    {
                        productos.First(x => x.Clave == respuesta.Valor.Clave).Nombre = respuesta.Valor.Nombre;
                        productos.First(x => x.Clave == respuesta.Valor.Clave).Existencias = respuesta.Valor.Existencias;
                        productos.First(x => x.Clave == respuesta.Valor.Clave).CostoUnidad = respuesta.Valor.CostoUnidad;
                        productosFiltrados = productos;
                        entradaProducto = 0;
                        StateHasChanged();

                        await swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "¡Éxito!",
                            Text = $"Actualmente existen {producto.Existencias = producto.Existencias + entradaProducto} unidades de {producto.Nombre}.",
                            Icon = SweetAlertIcon.Success
                        });
                        producto = new ProductoDTO();
                        StateHasChanged();
                        await JS.InvokeVoidAsync("minimizarModal", "modalEntrada");
                    }
                    else
                    {
                        await swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "¡Error!",
                            Text = respuesta.Mensaje,
                            Icon = SweetAlertIcon.Error
                        });
                    }
                }
            }
            catch (Exception)
            {
                await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¡Error!",
                    Text = $"Ocurrio un error al hacer la entrada de productos, intenta nuevamente.",
                    Icon = SweetAlertIcon.Error
                });
            }
        }
        else
        {
            await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = tokenValido,
                Icon = SweetAlertIcon.Error
            });
            //Cerrar sesión y redirigir a logín.
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
        }
    }
    private async Task GuardarActualizarProducto()
    {
        var autenticacionExt = (AutenticacionExtension)autenticacionProvider; //Crear variable para la autentificación.
        var sesion = await autenticacionExt.GetAuthenticationStateAsync();
        var tokenValido = await accesoService.ValidarToken(sesion.User.FindFirst("Token")!.Value.ToString()); //Revisar si el token es valido.

        if (tokenValido != null && tokenValido.Equals("Token válido"))
        {
            try
            {
                var resultado = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmación",
                    Text = $"¿Estás seguro de que deseas {(edicion ? "actualizar" : "guardar")} este producto?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí",
                    CancelButtonText = "No"
                });
                if (resultado.IsConfirmed)
                {
                    if (edicion)
                    {
                        var respuesta = await productoService.Actualizar(producto);
                        if (respuesta.EsCorrecto)
                        {
                            productos.First(x => x.Clave == respuesta.Valor.Clave).Nombre = respuesta.Valor.Nombre;
                            productos.First(x => x.Clave == respuesta.Valor.Clave).Existencias = respuesta.Valor.Existencias;
                            productos.First(x => x.Clave == respuesta.Valor.Clave).CostoUnidad = respuesta.Valor.CostoUnidad;
                            productosFiltrados = productos;
                            producto = new ProductoDTO();
                            StateHasChanged();

                            await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Éxito!",
                                Text = respuesta.Mensaje,
                                Icon = SweetAlertIcon.Success
                            });
                            await JS.InvokeVoidAsync("minimizarModal", "modalEdicion");
                        }
                        else
                        {
                            await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Error!",
                                Text = respuesta.Mensaje,
                                Icon = SweetAlertIcon.Error
                            });
                        }
                    }
                    else
                    {
                        var respuesta = await productoService.Guardar(producto);
                        if (respuesta.EsCorrecto)
                        {
                            productos.Add(respuesta.Valor);
                            productosFiltrados = productos;
                            producto = new ProductoDTO();
                            StateHasChanged();

                            await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Éxito!",
                                Text = respuesta.Mensaje,
                                Icon = SweetAlertIcon.Success
                            });
                            await JS.InvokeVoidAsync("minimizarModal", "modalEdicion");
                        }
                        else
                        {
                            await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Error!",
                                Text = respuesta.Mensaje,
                                Icon = SweetAlertIcon.Error
                            });
                        }
                    }
                }
            }
            catch (Exception)
            {
                await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¡Error!",
                    Text = $"Ocurrio un error al {(edicion ? "actualizar" : "guardar")} este producto, intenta nuevamente.",
                    Icon = SweetAlertIcon.Error
                });
            }
        }
        else
        {
            await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = tokenValido,
                Icon = SweetAlertIcon.Error
            });
            //Cerrar sesión y redirigir a logín.
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
        }
    }
    #endregion
    #region "PDF"
    private async Task GenerarPdf()
    {
        Console.WriteLine("Generando PDF...");
        var margen = new double[] { 10, 10, 10, 10 };

        // Construir el cuerpo de la tabla primero.
        var filasTabla = new StringBuilder();

        if (productosFiltrados == null || !productosFiltrados.Any())
        {
            filasTabla.AppendLine(@"<tr>
                <td colspan=""4"" class=""no-products"">
                    <div style=""font-size: 3rem; margin-bottom: 15px;"">!</div>
                    <h3 style=""font-weight: 500;"">No hay productos registrados</h3>
                    <p>El sistema no cuenta con productos en este momento</p>
                </td>
            </tr>");
        }
        else
        {
            foreach (var item in productosFiltrados)
            {
                filasTabla.AppendLine($@"
                <tr style='border-bottom: 1px solid #dee2e6; background-color:white;'>
                    <td class='text-center'>{item.Clave}</td>
                    <td class='text-start'>{item.Nombre}</td>
                    <td class='text-center'>{item.Existencias}</td>
                    <td class='text-center'>{item.CostoUnidad.ToString().Replace(',','.')}</td>
                </tr>");
            }
        }

        // Ahora construir el HTML completo.
        string filas = filasTabla.ToString();
        string html = $@"
        <!DOCTYPE html>
        <html>
            <head>
                <meta charset=""UTF-8"">
                <style>
                    body {{
                        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                        color: #333;
                    }}
                    .table {{
                        width: 100%;
                        border-collapse: collapse;
                        margin: 20px 0;
                        border-radius: 8px;
                        overflow: hidden;
                    }}
                    th {{
                        background: linear-gradient(135deg, #2D3250 0%, #424769 100%);
                        color: white;
                        font-weight: 600;
                        padding: 12px;
                        text-align: center;
                    }}
                    td {{
                        padding: 10px;
                        border-bottom: 1px solid #dee2e6;
                        text-align: center;
                    }}
                    .no-products {{
                        padding: 20px;
                        color: #6c757d;
                        text-align: center;
                    }}
                    h1 {{
                        color: #2D3250;
                        border-bottom: 2px solid #424769;
                        padding-bottom: 10px;
                    }}
                </style>
            </head>
            <body>
                <div style=""margin: 20px;"">
                    <h1>Reporte de Productos</h1>
                    <div style=""border-radius: 8px; overflow: hidden; box-shadow: 0 0 10px rgba(0,0,0,0.1);"">
                        <table class=""table"">
                            <thead>
                                <tr>
                                    <th style='color:black;'><strong>Clave de Producto</strong></th>
                                    <th style='color:black;'><strong>Nombre</strong></th>
                                    <th style='color:black;'><strong>Número de Existencias</strong></th>
                                    <th style='color:black;'><strong>Costo por Unidad</strong></th>
                                </tr>
                            </thead>
                            <tbody>
                                {filas}
                            </tbody>
                        </table>
                    </div>
                    <div style=""margin-top: 20px; color: #6c757d; text-align: center;"">
                        <small>Generado el {DateTime.Now:dd/MM/yyyy HH:mm}</small>
                    </div>
                </div>
            </body>
        </html>";

        var resultado = await _pdfService.PDF(new PDF
        {
            Html = html,
            Orientacion = "Vertical",
            Margenes = margen
        });

        await _js.InvokeVoidAsync("descargarArchivo", "reporte_productos.pdf", resultado);
    }
    #endregion
}
