@page "/PedidosPersonalAdministrativo"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using CurrieTechnologies.Razor.SweetAlert2
@using BSCEvaluacionTecnica.Shared.Extensions;
@using BSCEvaluacionTecnica.Business.Interfaces;
@using System.Security.Claims
@using BSCEvaluacionTecnica.Shared.DTOs;
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navegacion
@inject IAccesoService accesoService
@inject IPermisoModulosService permisoModulosService
@inject IPedidosService pedidosService
@inject SweetAlertService swal

@attribute [Authorize(Roles = "Personal Administrativo")]

<PageTitle>Pedidos - Personal Administrativo</PageTitle>

<style>
    option {
        color: white;
        background-color: #2c2f4a;
    }

    .busqueda, .busqueda::placeholder {
        background-color: #9FA5C9;
        color: white;
        border: none;
        border-radius: 5px;
    }

        .busqueda:focus {
            outline: none; /* Evita el sombreado azul o resaltado */
            box-shadow: none; /* Evita el borde adicional */
            border: none; /* Asegura que no aparezca un borde */
        }
</style>

<AuthorizeView>
    <Authorized>

        @if (context.User.FindFirst("Acceso")!.Value.ToString().Equals("Permitido")) // Validar que el usuario tenga acceso al sistema.
        {
            if (accesoModulo == 1)
            {
                <div class="container-fluid px-0 p-2" style="min-height: 100vh; display: flex; flex-direction: column;">
                    <!-- Tabla de Pedidos -->
                    <div class="row w-100 mx-0 mb-3">
                        <div class="col-12 col-lg-9 mb-3 mb-lg-0">
                            <div class="d-flex align-items-center">
                                <div class="input-group w-100">
                                    <InputText class="busqueda form-control" style="background-color: #9FA5C9; color:white;" placeholder="Buscar por Fecha, Vendedor o Cliente" @bind-Value="textoBusqueda" @oninput="Filtrar" />
                                    <button class="busqueda btn btn-outline-secondary ml-2" type="button" @onclick="LimpiarFiltro">
                                        <i class="bi bi-pencil"></i> Limpiar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row w-100">
                        @if (pedidos?.Count() == 0 || pedidos == null)
                        {
                            <div class="alert alert-primary d-flex align-items-center justify-content-center" role="alert">
                                <div>
                                    <i class="bi bi-database-fill-x me-2"></i>
                                    No se cuenta con productos registrados.
                                </div>
                            </div>
                        }
                        else if (pedidosFiltrados?.Count() == 0 || pedidosFiltrados == null)
                        {
                            <div class="alert alert-info d-flex align-items-center justify-content-center" role="alert">
                                <div>
                                    <i class="bi bi-database-fill-x me-2"></i>
                                    No se encontraron coincidencias.
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row mx-0">
                                <div class="table-responsive rounded-3 shadow" style="max-height: 800px;">
                                    <table class="table table-hover mb-0">
                                        <thead class="sticky-top" style="background: linear-gradient(135deg, #2D3250 0%, #424769 100%)">
                                            <tr class="text-center">
                                                <th class="align-middle py-3 text-black fw-semibold ps-4">Cliente</th>
                                                <th class="align-middle py-3 text-black fw-semibold">Fecha y Hora</th>
                                                <th class="align-middle py-3 text-black fw-semibold">Vendedor</th>
                                                <th class="align-middle py-3 text-black fw-semibold pe-4">Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                int rowIndex = 0;
                                                foreach (var item in pedidosFiltrados!)
                                                {
                                                    string rowClass = rowIndex % 2 == 0 ? "bg-light" : "bg-white";
                                                    <tr class="text-center @rowClass border-bottom border-secondary">
                                                        <td class="text-start align-middle ps-4">@item.Pedido.Cliente</td>
                                                        <td class="align-middle">
                                                            @item.Pedido.FechaHora.ToString("dd/MM/yyyy HH:mm")
                                                        </td>
                                                        <td class="align-middle">
                                                            <div class="fw-semibold">@item.Pedido.Vendedor.Nombre</div>
                                                            <div class="text-muted small d-flex align-items-center justify-content-center">
                                                                <i class="bi bi-envelope-fill me-1"></i>
                                                                @item.Pedido.Vendedor.Correo
                                                            </div>
                                                        </td>
                                                        <td class="align-middle pe-4">
                                                            <div class="d-flex justify-content-center gap-2">
                                                                <button class="btn btn-info btn-sm d-flex align-items-center text-white px-3" @onclick="(() => SeleccionarPedido(item))">
                                                                    <i class="bi bi-pencil me-2"></i>
                                                                    <span>Ver Detalles</span>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    rowIndex++;
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                    <!-- Modal de detalles de pedidos -->
                    @if (registrosPedido?.Pedido != null)
                    {
                        <div class="modal fade" id="modalDetalles" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalDocumento" aria-hidden="true">
                            <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable 0">
                                <div class="modal-content">
                                    <div class="modal-header text-white" style="background-color:#2D3250;">
                                        <p class="modal-title">
                                            <strong>@($"Detalles del pedido {registrosPedido.Pedido.Id} del dia {registrosPedido.Pedido.FechaHora.ToString("dd/MM/yyyy HH:mm")}")</strong>
                                        </p>
                                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        @if (registrosPedido.Detalles?.Count() == 0 || registrosPedido.Detalles == null)
                                        {
                                            <div class="alert alert-primary d-flex align-items-center justify-content-center" role="alert">
                                                <div>
                                                    <i class="bi bi-database-fill-x me-2"></i>
                                                    Este pedido no cuenta con detalles los cuales mostrar.
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="row mx-0 mb-3">
                                                <div class="table-responsive rounded-3 shadow" style="max-height: 800px;">
                                                    <table class="table table-hover mb-0">
                                                        <thead class="sticky-top" style="background: linear-gradient(135deg, #2D3250 0%, #424769 100%)">
                                                            <tr class="text-center">
                                                                <th class="align-middle py-3 text-black fw-semibold ps-4">Producto</th>
                                                                <th class="align-middle py-3 text-black fw-semibold">Cantidad</th>
                                                                <th class="align-middle py-3 text-black fw-semibold">Subtotal</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                int rowIndex = 0;
                                                                foreach (var item in registrosPedido.Detalles!)
                                                                {
                                                                    string rowClass = rowIndex % 2 == 0 ? "bg-light" : "bg-white";
                                                                    <tr class="text-center @rowClass border-bottom border-secondary">
                                                                        <td class="text-start ps-4 align-middle">
                                                                            <div class="fw-semibold">@item.Producto.Nombre</div>
                                                                            <div class="text-muted" style="font-size: .875rem;">
                                                                                Costo: $@item.Producto.CostoUnidad.ToString().Replace(",",".")
                                                                            </div>
                                                                        </td>
                                                                        <td class="align-middle">@item.Cantidad</td>
                                                                        <td class="align-middle">$@item.SubTotal.ToString().Replace(",", ".")</td>
                                                                    </tr>
                                                                    rowIndex++;
                                                                }
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div>
                                                <p><strong>Total: </strong>$@(registrosPedido.Detalles.Select(x => x.SubTotal).Sum().ToString().Replace(",", "."))</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (accesoModulo == 2)
            {
                <p class="alert alert-danger">
                    Actualmente este módulo se encuentra deshabilitado o su rol de usuario no tiene el acceso necesario.
                </p>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    //Funciones JS.
    [Inject] IJSRuntime JS { get; set; }
    //Acceso a el módulo.
    int accesoModulo = 0;
    List<RegistroPedidosDTO>? pedidos = new List<RegistroPedidosDTO>();
    List<RegistroPedidosDTO>? pedidosFiltrados = new List<RegistroPedidosDTO>();
    RegistroPedidosDTO? registrosPedido = new RegistroPedidosDTO();
    //Barra de busqueda
    string textoBusqueda = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider; //Crear variable para autenticación.
            var sesion = await autenticacionExt.GetAuthenticationStateAsync(); //Obtener el estado de la autenticación actual.

            if (sesion.User.Identity!.IsAuthenticated) //Si el usuario está autenticado.
            {
                var tokenValido = await accesoService.ValidarToken(sesion.User.FindFirst("Token")!.Value.ToString()); // Revisar si el token es válido.

                if (tokenValido != null && tokenValido.Equals("Token válido")) //Si el token es válido.
                {
                    var acceso = await permisoModulosService.ConsultarModulosUsuario(Convert.ToInt32(sesion.User.FindFirst(ClaimTypes.NameIdentifier)?.Value)); //Consulta de módulos.
                    if (acceso.Find(x => x.ModuloSistema!.Equals("AdministrarPedidos-PersonalAdministrativos"))!.Acceso!.Equals("Permitido")) //Si el usuario tiene acceso al módulo.
                    {
                        accesoModulo = 1;

                        //Extraer a los pedidos.
                        pedidos = await pedidosService.HistorialPedidos();
                        pedidosFiltrados = pedidos;
                    }
                    else
                    {
                        accesoModulo = 2;
                    }
                }
                else //Si no es válido mostrar mensaje de error.
                {
                    await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = tokenValido,
                        Icon = SweetAlertIcon.Error
                    });
                    //Cerrar sesión y redirigir a logín.
                    await autenticacionExt.ActualizarEstadoAutenticacion(null);
                    navegacion.NavigateTo("/");
                }
            }
            else
            {
                accesoModulo = 2;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar la página, detalles: " + ex);
            //Cerrar sesión y redirigir a login
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
            navegacion.NavigateTo("/", true);
        }
    }

    #region "Seleccionar y administrar pedidos"
    private async void SeleccionarPedido(RegistroPedidosDTO registroPedidoSeleccionado)
    {
        //Validar cuando el usuario seleccione editar al usuario.
        registrosPedido = new RegistroPedidosDTO
        {
            Pedido = registroPedidoSeleccionado.Pedido,
            Detalles = registroPedidoSeleccionado.Detalles
        };
        StateHasChanged();
        await JS.InvokeVoidAsync("abrirModal", "modalDetalles");
    }
    private void Filtrar(ChangeEventArgs e)
    {
        textoBusqueda = e.Value?.ToString() ?? "";
        if (string.IsNullOrWhiteSpace(textoBusqueda))
        {
            pedidosFiltrados = pedidos;
        }
        else
        {
            pedidosFiltrados = pedidos?.Where(v =>
                v.Pedido.FechaHora.ToString("dd/MM/yyyy HH:mm").Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                v.Pedido.Vendedor.Nombre.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                v.Pedido.Cliente.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }
    private void LimpiarFiltro()
    {
        textoBusqueda = string.Empty;
        pedidosFiltrados = pedidos;
    }
    #endregion
}
