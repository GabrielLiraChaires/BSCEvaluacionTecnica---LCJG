@page "/AdministrarUsuarios"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using CurrieTechnologies.Razor.SweetAlert2
@using BSCEvaluacionTecnica.Shared.Extensions;
@using BSCEvaluacionTecnica.Business.Interfaces;
@using System.Security.Claims
@using BSCEvaluacionTecnica.Shared.DTOs;
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navegacion
@inject IAccesoService accesoService
@inject IPermisoModulosService permisoModulosService
@inject IUsuarioService usuarioService
@inject SweetAlertService swal

@attribute [Authorize(Roles = "Administrador")]

<PageTitle>Administrador - Administrar Usuarios</PageTitle>

<style>
    option {
        color: white;
        background-color: #2c2f4a;
    }

    .busqueda, .busqueda::placeholder {
        background-color: #9FA5C9;
        color: white;
        border: none;
        border-radius: 5px;
    }

        .busqueda:focus {
            outline: none; /* Evita el sombreado azul o resaltado */
            box-shadow: none; /* Evita el borde adicional */
            border: none; /* Asegura que no aparezca un borde */
        }
</style>

<AuthorizeView>
    <Authorized>

        @if (context.User.FindFirst("Acceso")!.Value.ToString().Equals("Permitido")) // Validar que el usuario tenga acceso al sistema.
        {
            if (accesoModulo == 1)
            {
                <div class="container-fluid px-0 p-2" style="min-height: 100vh; display: flex; flex-direction: column;">
                    <!-- Tabla de Usuarios -->
                    <div class="row w-100 mx-0 mb-3">
                        <div class="col-12 col-lg-9 mb-3 mb-lg-0">
                            <div class="d-flex align-items-center">
                                <div class="input-group w-100">
                                    <InputText class="busqueda form-control" style="background-color: #9FA5C9; color:white;" placeholder="Buscar por Nombre, Correo o Rol" @bind-Value="textoBusqueda" @oninput="Filtrar" />
                                    <button class="busqueda btn btn-outline-secondary ml-2" type="button" @onclick="LimpiarFiltro">
                                        <i class="bi bi-pencil"></i> Limpiar
                                    </button>
                                </div>
                            </div>
                        </div>
                        <!-- Botón NUEVO -->
                        <div class="col-12 col-lg-3 d-flex justify-content-end align-items-center">
                            <button type="submit" class="btn btn-primary btn-sm" style="padding: 0.375rem 0.75rem; background-color: #424769; color:white; border:none; white-space:nowrap;" @onclick="NuevoUsuario">
                                <i class="bi bi-plus-circle"></i> Nuevo
                            </button>
                        </div>
                    </div>
                    <div class="row w-100">
                        @if (usuarios?.Count() == 0 || usuarios == null)
                        {
                            <div class="alert alert-primary d-flex align-items-center justify-content-center" role="alert">
                                <div>
                                    <i class="bi bi-database-fill-x me-2"></i>
                                    No se cuenta con usuarios registrados.
                                </div>
                            </div>
                        }
                        else if (usuariosFiltrados?.Count() == 0 || usuariosFiltrados == null)
                        {
                            <div class="alert alert-info d-flex align-items-center justify-content-center" role="alert">
                                <div>
                                    <i class="bi bi-database-fill-x me-2"></i>
                                    No se encontraron coincidencias.
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row mx-0">
                                <div class="table-responsive rounded-3 shadow" style="max-height: 800px;">
                                    <table class="table table-hover mb-0">
                                        <thead class="sticky-top" style="background: linear-gradient(135deg, #2D3250 0%, #424769 100%)">
                                            <tr class="text-center">
                                                <th class="align-middle py-3 text-black fw-semibold ps-4">Nombre del Usuario</th>
                                                <th class="align-middle py-3 text-black fw-semibold">Correo Electrónico</th>
                                                <th class="align-middle py-3 text-black fw-semibold">Rol</th>
                                                <th class="align-middle py-3 text-black fw-semibold pe-4">Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                int rowIndex = 0;
                                                foreach (var item in usuariosFiltrados!)
                                                {
                                                    string rowClass = rowIndex % 2 == 0 ? "bg-light" : "bg-white";
                                                    <tr class="text-center @rowClass border-bottom border-secondary">
                                                        <td class="text-start align-middle ps-4">@item.Nombre</td>
                                                        <td class="align-middle">@item.Correo</td>
                                                        <td class="align-middle">@item.Rol</td>
                                                        <td class="align-middle pe-4">
                                                            <div class="d-flex justify-content-center gap-2">
                                                                <button class="btn btn-warning btn-sm d-flex align-items-center text-white px-3" @onclick="(() => SeleccionarUsuario(item))">
                                                                    <i class="bi bi-pencil me-2"></i>
                                                                    <span>Editar</span>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    rowIndex++;
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                    <!-- Modal de edición -->
					<div class="modal fade" id="modalEdicion" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalDocumento" aria-hidden="true">
						<div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable 0">
							<div class="modal-content">
                                <div class="modal-header text-white" style="background-color:#2D3250;">
                                    <p class="modal-title">
                                        <strong>@(edicion ? $"Edición del usuario {usuario.Nombre}" : "Nuevo Usuario")</strong>
                                    </p>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
								<div class="modal-body">
                                    <EditForm Model="usuario" OnValidSubmit="GuardarActualizarUsuario" Context="Formulario">
                                        <DataAnnotationsValidator />
                                        <div class="modal-body">
                                            <div class="row mb-2">
                                                <div class="col-12">
                                                    <label for="inputText" class="form-label"><strong>Nombre Completo</strong></label>
                                                    <InputText class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="usuario.Nombre" />
                                                    <ValidationMessage For="@(() => usuario.Nombre)" />
                                                </div>
                                            </div>
                                            <div class="row mb-2">
                                                <div class="col-6">
                                                    <label for="inputText" class="form-label"><strong>Correo Electrónico</strong></label>
                                                    <InputText class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="usuario.Correo" />
                                                    <ValidationMessage For="@(() => usuario.Correo)" />
                                                </div>
                                            </div>
                                            <div class="row mb-2">
                                                <div class="col-6">
                                                    <label for="inputText" class="form-label"><strong>Clave</strong></label>
                                                    <InputText class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="usuario.Clave" />
                                                    <ValidationMessage For="@(() => usuario.Clave)" />
                                                </div>
                                                <div class="col-6">
                                                    <label for="inputText" class="form-label"><strong>Confirmación de la Clave</strong></label>
                                                    <InputText class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="usuario.ClaveConfirmacion" />
                                                    <ValidationMessage For="@(() => usuario.ClaveConfirmacion)" />
                                                </div>
                                                @if (edicion)
                                                {
                                                    <div class="col-12">
                                                        <div class="form-text" style="color:rgba(179, 179, 179, 1);">
                                                            Por motivos de seguridad, la contraseña actual no se muestra. Por favor, ingrese una nueva si asi lo decea.
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                            <div class="row mb-2">
                                                @if(!edicion)
                                                {
                                                    <div class="col-12">
                                                        <label for="inputText" class="form-label"><strong>Rol</strong></label>
                                                        <InputSelect class="form-select text-black" style="background-color: #9FA5C9; color:white; border-radius: 10px;" aria-label="Large select example" @bind-Value="usuario.Rol">
                                                            <option value="">-- Seleccionar un rol --</option>
                                                            <option value="Administrador" selected="@(usuario.Rol == "Administrador" ? "selected" : null)">Administrador</option>
                                                            <option value="Personal Administrativo" selected="@(usuario.Rol == "Personal Administrativo" ? "selected" : null)">Personal Administrativo</option>
                                                            <option value="Vendedor" selected="@(usuario.Rol == "Vendedor" ? "selected" : null)">Vendedor</option>
                                                        </InputSelect>
                                                        <ValidationMessage For="@(() => usuario.Rol)" />
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="col-12">
                                                        <label for="inputText" class="form-label"><strong>Rol</strong></label>
                                                        <InputSelect class="form-select text-black" style="background-color: rgba(179, 179, 179, 1); border-radius: 10px;" aria-label="Large select example" @bind-Value="usuario.Rol" disabled>
                                                            <option value="">-- Seleccionar un rol --</option>
                                                            <option value="Administrador" selected="@(usuario.Rol == "Administrador" ? "selected" : null)">Administrador</option>
                                                            <option value="Personal Administrativo" selected="@(usuario.Rol == "Personal Administrativo" ? "selected" : null)">Personal Administrativo</option>
                                                            <option value="Vendedor" selected="@(usuario.Rol == "Vendedor" ? "selected" : null)">Vendedor</option>
                                                        </InputSelect>
                                                        <ValidationMessage For="@(() => usuario.Rol)" />
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="submit" class="btn btn-dark fs-5" style="border-radius: 20px;">
                                                <i class="bi bi-check2-circle"></i> Aceptar
                                            </button>
                                            <button type="button" class="btn btn-light fs-5" style="border-radius: 20px;" data-bs-dismiss="modal">
                                                <i class="bi bi-arrow-left-square"></i> Cancelar
                                            </button>
                                        </div>
                                    </EditForm>
								</div>
							</div>
						</div>
					</div>
                </div>
            }
            else if (accesoModulo == 2)
            {
                <p class="alert alert-danger">
                    Actualmente este módulo se encuentra deshabilitado o su rol de usuario no tiene el acceso necesario.
                </p>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    //Funciones JS.
    [Inject] IJSRuntime JS { get; set; }
    //Acceso a el módulo.
    int accesoModulo = 0;
    List<UsuarioDTO>? usuarios = new List<UsuarioDTO>();
    List<UsuarioDTO>? usuariosFiltrados = new List<UsuarioDTO>();
    UsuarioDTO? usuario = new UsuarioDTO();
    //Barra de busqueda
    string textoBusqueda = string.Empty;
    bool edicion = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider; //Crear variable para autenticación.
            var sesion = await autenticacionExt.GetAuthenticationStateAsync(); //Obtener el estado de la autenticación actual.

            if (sesion.User.Identity!.IsAuthenticated) //Si el usuario está autenticado.
            {
                var tokenValido = await accesoService.ValidarToken(sesion.User.FindFirst("Token")!.Value.ToString()); // Revisar si el token es válido.

                if (tokenValido != null && tokenValido.Equals("Token válido")) //Si el token es válido.
                {
                    var acceso = await permisoModulosService.ConsultarModulosUsuario(Convert.ToInt32(sesion.User.FindFirst(ClaimTypes.NameIdentifier)?.Value)); //Consulta de módulos.
                    if (acceso.Find(x => x.ModuloSistema!.Equals("AdministrarUsuarios-Administrador"))!.Acceso!.Equals("Permitido")) //Si el usuario tiene acceso al módulo.
                    {
                        accesoModulo = 1;

                        //Extraer a los usuarios.
                        usuarios = await usuarioService.Consultar();
                        usuariosFiltrados = usuarios;
                    }
                    else
                    {
                        accesoModulo = 2;
                    }
                }
                else //Si no es válido mostrar mensaje de error.
                {
                    await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = tokenValido,
                        Icon = SweetAlertIcon.Error
                    });
                    //Cerrar sesión y redirigir a logín.
                    await autenticacionExt.ActualizarEstadoAutenticacion(null);
                    navegacion.NavigateTo("/");
                }
            }
            else
            {
                accesoModulo = 2;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar la página, detalles: " + ex);
            //Cerrar sesión y redirigir a login
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
            navegacion.NavigateTo("/", true);
        }
    }

    #region "Seleccionar y administrar usuarios"
    private async void SeleccionarUsuario(UsuarioDTO usuarioSeleccionado)
    {
        //Validar cuando el usuario seleccione editar al usuario.
        edicion = true;
        usuario = new UsuarioDTO
        {
            Id = usuarioSeleccionado.Id,
            Nombre = usuarioSeleccionado.Nombre,
            Correo = usuarioSeleccionado.Correo,
            Rol = usuarioSeleccionado.Rol,
            Edicion = true
        };
        StateHasChanged();
        await JS.InvokeVoidAsync("abrirModal", "modalEdicion");
    }
    private async void NuevoUsuario()
    {
        edicion = false;
        usuario = new UsuarioDTO
        {
            Edicion = false
        };
        StateHasChanged();
        await JS.InvokeVoidAsync("abrirModal", "modalEdicion");
    }
    private void Filtrar(ChangeEventArgs e)
    {
        textoBusqueda = e.Value?.ToString() ?? "";
        if (string.IsNullOrWhiteSpace(textoBusqueda))
        {
            usuariosFiltrados = usuarios;
        }
        else
        {
            usuariosFiltrados = usuarios?.Where(v =>
                v.Nombre.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                v.Correo.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase) ||
                v.Rol.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }
    private void LimpiarFiltro()
    {
        textoBusqueda = string.Empty;
        usuariosFiltrados = usuarios;
    }
    private async Task GuardarActualizarUsuario()
    {
        var autenticacionExt = (AutenticacionExtension)autenticacionProvider; //Crear variable para la autentificación.
        var sesion = await autenticacionExt.GetAuthenticationStateAsync();
        var tokenValido = await accesoService.ValidarToken(sesion.User.FindFirst("Token")!.Value.ToString()); //Revisar si el token es valido.

        if (tokenValido != null && tokenValido.Equals("Token válido"))
        {
            try
            {
                var resultado = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmación",
                    Text = $"¿Estás seguro de que deseas {(edicion ? "actualizar" : "guardar")} este usuario?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí",
                    CancelButtonText = "No"
                });
                if (resultado.IsConfirmed)
                {
                    if (edicion)
                    {
                        var respuesta = await usuarioService.Actualizar(usuario);
                        if (respuesta.EsCorrecto)
                        {
                            usuarios.First(x => x.Id == respuesta.Valor.Id).Nombre = respuesta.Valor.Nombre;
                            usuarios.First(x => x.Id == respuesta.Valor.Id).Correo = respuesta.Valor.Correo;
                            usuarios.First(x => x.Id == respuesta.Valor.Id).Rol = respuesta.Valor.Rol;
                            usuariosFiltrados = usuarios;
                            usuario = new UsuarioDTO();
                            StateHasChanged();

                            await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Éxito!",
                                Text = respuesta.Mensaje,
                                Icon = SweetAlertIcon.Success
                            });
                            await JS.InvokeVoidAsync("minimizarModal", "modalEdicion");
                        }
                        else
                        {
                            await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Error!",
                                Text = respuesta.Mensaje,
                                Icon = SweetAlertIcon.Error
                            });
                        }
                    }
                    else
                    {
                        var respuesta = await usuarioService.Guardar(usuario);
                        if (respuesta.EsCorrecto)
                        {
                            usuarios.Add(respuesta.Valor);
                            usuariosFiltrados = usuarios;
                            usuario = new UsuarioDTO();
                            StateHasChanged();

                            await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Éxito!",
                                Text = respuesta.Mensaje,
                                Icon = SweetAlertIcon.Success
                            });
                            await JS.InvokeVoidAsync("minimizarModal", "modalEdicion");
                        }
                        else
                        {
                            await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Error!",
                                Text = respuesta.Mensaje,
                                Icon = SweetAlertIcon.Error
                            });
                        }
                    }
                }
            }
            catch (Exception)
            {
                await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¡Error!",
                    Text = $"Ocurrio un error al {(edicion ? "actualizar" : "guardar")} este usuario, intenta nuevamente.",
                    Icon = SweetAlertIcon.Error
                });
            }
        }
        else
        {
            await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = tokenValido,
                Icon = SweetAlertIcon.Error
            });
            //Cerrar sesión y redirigir a logín.
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
        }
    }
    #endregion
}
