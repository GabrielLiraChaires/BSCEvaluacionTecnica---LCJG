@page "/AdministrarUsuarios"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using CurrieTechnologies.Razor.SweetAlert2
@using BSCEvaluacionTecnica.Shared.Extensions;
@using BSCEvaluacionTecnica.Business.Interfaces;
@using System.Security.Claims
@using BSCEvaluacionTecnica.Shared.DTOs;
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navegacion
@inject IAccesoService accesoService
@inject IPermisoModulosService permisoModulosService
@inject IUsuarioService usuarioService
@inject SweetAlertService swal

@attribute [Authorize(Roles = "Administrador")]

<PageTitle>Administrador - Administrar Usuarios</PageTitle>

<style>
    option {
        color: white;
        background-color: #2c2f4a;
    }
</style>

<AuthorizeView>
    <Authorized>

        @if (context.User.FindFirst("Acceso")!.Value.ToString().Equals("Permitido")) // Validar que el usuario tenga acceso al sistema.
        {
            if (accesoModulo == 1)
            {
                <div class="container-fluid px-0 p-2" style="min-height: 100vh; display: flex; flex-direction: column;">
                    <!-- Tabla de Usuarios -->
                    <div class="d-flex justify-content-end mb-3">
                        <button class="btn btn-success d-flex align-items-center" style="border-radius: 10px; padding: 0.5rem 1rem;" @onclick="NuevoUsuario">
                            <i class="bi bi-plus-circle me-1"></i>
                            <span>Nuevo Usuario</span>
                        </button>
                    </div>
                    <div class="row w-100">
                        @if (usuarios?.Count() == 0 || usuarios == null)
                        {
                            <div class="alert alert-primary d-flex align-items-center justify-content-center" role="alert">
                                <div>
                                    <i class="bi bi-database-fill-x me-2"></i>
                                    No se cuenta con usuarios registrados.
                                </div>
                            </div>
                        }
                        else if (usuariosFiltrados?.Count() == 0 || usuariosFiltrados == null)
                        {
                            <div class="alert alert-info d-flex align-items-center justify-content-center" role="alert">
                                <div>
                                    <i class="bi bi-database-fill-x me-2"></i>
                                    No se encontraron coincidencias.
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row mx-0">
                                <div class="table-responsive rounded-3 shadow" style="max-height: 800px;">
                                    <table class="table table-hover mb-0">
                                        <thead class="sticky-top" style="background: linear-gradient(135deg, #2D3250 0%, #424769 100%)">
                                            <tr class="text-center">
                                                <th class="align-middle py-3 text-black fw-semibold ps-4">Nombre del Usuario</th>
                                                <th class="align-middle py-3 text-black fw-semibold">Correo Electrónico</th>
                                                <th class="align-middle py-3 text-black fw-semibold">Rol</th>
                                                <th class="align-middle py-3 text-black fw-semibold pe-4">Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @{
                                                int rowIndex = 0;
                                                foreach (var item in usuariosFiltrados!)
                                                {
                                                    string rowClass = rowIndex % 2 == 0 ? "bg-light" : "bg-white";
                                                    <tr class="text-center @rowClass border-bottom border-secondary">
                                                        <td class="text-start align-middle ps-4">@item.Nombre</td>
                                                        <td class="align-middle">@item.Correo</td>
                                                        <td class="align-middle">@item.Rol</td>
                                                        <td class="align-middle pe-4">
                                                            <div class="d-flex justify-content-center gap-2">
                                                                <button class="btn btn-warning btn-sm d-flex align-items-center text-white px-3" @onclick="(() => SeleccionarUsuario(item, 1))">
                                                                    <i class="bi bi-pencil me-2"></i>
                                                                    <span>Editar</span>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    rowIndex++;
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                    <!-- Modal de edición -->
					<div class="modal fade" id="modalEdicion" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="modalDocumento" aria-hidden="true">
						<div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable 0">
							<div class="modal-content">
                                <div class="modal-header text-white" style="background-color:#9FA5C9;">
                                    <p class="modal-title">
                                        <strong>@(edicion ? $"Edición del usuario {usuario.Nombre}" : "Nuevo Usuario")</strong>
                                    </p>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
								<div class="modal-body colorBlancoMedioFondo">
                                    <EditForm Model="usuario" OnValidSubmit="GuardarActualizarUsuario" Context="Formulario">
                                        <DataAnnotationsValidator />
                                        <div class="modal-body">
                                            <div class="row mb-2">
                                                <div class="col-12">
                                                    <label for="inputText" class="form-label"><strong>Nombre Completo</strong></label>
                                                    <InputText class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="usuario.Nombre" />
                                                    <ValidationMessage For="@(() => usuario.Nombre)" />
                                                </div>
                                            </div>
                                            <div class="row mb-2">
                                                <div class="col-6">
                                                    <label for="inputText" class="form-label"><strong>Correo Electrónico</strong></label>
                                                    <InputText class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="usuario.Correo" />
                                                    <ValidationMessage For="@(() => usuario.Correo)" />
                                                </div>
                                                <div class="col-6">
                                                    <label for="inputText" class="form-label"><strong>Clave</strong></label>
                                                    <InputText class="form-control" style="background-color: #9FA5C9; color:white;" @bind-Value="usuario.Clave"/>
                                                    @if (edicion)
                                                    {
                                                        <div class="form-text" style="color:rgba(179, 179, 179, 1);">
                                                            Por motivos de seguridad, la contraseña actual no se muestra. Por favor, ingrese una nueva si asi lo decea.
                                                        </div>
                                                    }
                                                    <ValidationMessage For="@(() => usuario.Clave)" />
                                                </div>
                                            </div>
                                            <div class="row mb-2">
                                                @if(!edicion)
                                                {
                                                    <div class="col-12">
                                                        <label for="inputText" class="form-label"><strong>Rol</strong></label>
                                                        <InputSelect class="form-select text-black" style="background-color: #9FA5C9; color:white; border-radius: 10px;" aria-label="Large select example" @bind-Value="usuario.Rol">
                                                            <option value="">-- Seleccionar un rol --</option>
                                                            <option value="Administrador" selected="@(usuario.Rol == "Administrador" ? "selected" : null)">Administrador</option>
                                                            <option value="Personal Administrativo" selected="@(usuario.Rol == "Personal Administrativo" ? "selected" : null)">Personal Administrativo</option>
                                                            <option value="Vendedor" selected="@(usuario.Rol == "Vendedor" ? "selected" : null)">Vendedor</option>
                                                        </InputSelect>
                                                        <ValidationMessage For="@(() => usuario.Rol)" />
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="col-12">
                                                        <label for="inputText" class="form-label"><strong>Rol</strong></label>
                                                        <InputSelect class="form-select text-black" style="background-color: rgba(179, 179, 179, 1); border-radius: 10px;" aria-label="Large select example" @bind-Value="usuario.Rol" disabled>
                                                            <option value="">-- Seleccionar un rol --</option>
                                                            <option value="Administrador" selected="@(usuario.Rol == "Administrador" ? "selected" : null)">Administrador</option>
                                                            <option value="Personal Administrativo" selected="@(usuario.Rol == "Personal Administrativo" ? "selected" : null)">Personal Administrativo</option>
                                                            <option value="Vendedor" selected="@(usuario.Rol == "Vendedor" ? "selected" : null)">Vendedor</option>
                                                        </InputSelect>
                                                        <ValidationMessage For="@(() => usuario.Rol)" />
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="submit" class="btn btn-dark fs-5" style="border-radius: 20px;">
                                                <i class="bi bi-check2-circle"></i> Aceptar
                                            </button>
                                            <button type="button" class="btn btn-light fs-5" style="border-radius: 20px;" data-bs-dismiss="modal">
                                                <i class="bi bi-arrow-left-square"></i> Cancelar
                                            </button>
                                        </div>
                                    </EditForm>
								</div>
							</div>
						</div>
					</div>
                </div>
            }
            else if (accesoModulo == 2)
            {
                <p class="alert alert-danger">
                    Actualmente este módulo se encuentra deshabilitado o su rol de usuario no tiene el acceso necesario.
                </p>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    //Funciones JS.
    [Inject] IJSRuntime JS { get; set; }
    //Acceso a el módulo.
    int accesoModulo = 0;
    List<UsuarioDTO>? usuarios = new List<UsuarioDTO>();
    List<UsuarioDTO>? usuariosFiltrados = new List<UsuarioDTO>();
    UsuarioDTO? usuario = new UsuarioDTO();
    bool edicion = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider; //Crear variable para autenticación.
            var sesion = await autenticacionExt.GetAuthenticationStateAsync(); //Obtener el estado de la autenticación actual.

            if (sesion.User.Identity!.IsAuthenticated) //Si el usuario está autenticado.
            {
                var tokenValido = await accesoService.ValidarToken(sesion.User.FindFirst("Token")!.Value.ToString()); // Revisar si el token es válido.

                if (tokenValido != null && tokenValido.Equals("Token válido")) //Si el token es válido.
                {
                    var acceso = await permisoModulosService.ConsultarModulosUsuario(Convert.ToInt32(sesion.User.FindFirst(ClaimTypes.NameIdentifier)?.Value)); //Consulta de módulos.
                    if (acceso.Find(x => x.ModuloSistema!.Equals("AdministrarUsuarios-Administrador"))!.Acceso!.Equals("Permitido")) //Si el usuario tiene acceso al módulo.
                    {
                        accesoModulo = 1;

                        //Extraer a los usuarios.
                        usuarios = await usuarioService.Consultar();
                        usuariosFiltrados = usuarios;
                    }
                    else
                    {
                        accesoModulo = 2;
                    }
                }
                else //Si no es válido mostrar mensaje de error.
                {
                    await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = tokenValido,
                        Icon = SweetAlertIcon.Error
                    });
                    //Cerrar sesión y redirigir a logín.
                    await autenticacionExt.ActualizarEstadoAutenticacion(null);
                    navegacion.NavigateTo("/");
                }
            }
            else
            {
                accesoModulo = 2;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error al cargar la página, detalles: " + ex);
            //Cerrar sesión y redirigir a login
            var autenticacionExt = (AutenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(null);
            navegacion.NavigateTo("/", true);
        }
    }

    #region "Seleccionar y administrar usuarios"
    private async void SeleccionarUsuario(UsuarioDTO usuarioSeleccionado, int caso)
    {
        //Validar cuando el usuario seleccione editar al usuario.
        if (caso==1)
        {
            edicion = true;
            usuario = new UsuarioDTO
            {
                Id = usuarioSeleccionado.Id,
                Nombre= usuarioSeleccionado.Nombre,
                Correo=usuarioSeleccionado.Correo,
                Rol=usuarioSeleccionado.Rol,
                Edicion=true
            };
            StateHasChanged();
            await JS.InvokeVoidAsync("abrirModal", "modalEdicion");
        }
        //Validar cuando el usuario seleccione administrar los accesos.
        else if(caso==2)
        {
            await JS.InvokeVoidAsync("abrirModal", "modalAdministracion");
        }
    }
    private async void NuevoUsuario()
    {
        edicion = false;
        usuario = new UsuarioDTO
        {
            Edicion = false
        };
        StateHasChanged();
        await JS.InvokeVoidAsync("abrirModal", "modalEdicion");
    }
    private async Task GuardarActualizarUsuario()
    {
        
    }
    #endregion
}
